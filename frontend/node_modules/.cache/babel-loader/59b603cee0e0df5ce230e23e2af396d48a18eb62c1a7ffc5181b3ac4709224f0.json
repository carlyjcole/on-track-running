{"ast":null,"code":"var _jsxFileName = \"/Users/carlycole/personal-projects/on-track/on-track/src/components/HeartRateChart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Heart rate data\nconst heartRateData = [{\n  year: 2021,\n  pace: '7:00',\n  rate: 150\n}\n// Add more data...\n];\n\n// Function to group data by pace\nconst groupByPace = data => {\n  const groupedData = {};\n  data.forEach(({\n    year,\n    pace,\n    rate\n  }) => {\n    if (!groupedData[year]) {\n      groupedData[year] = {};\n    }\n    const paceKey = pace.replace(':', ''); // Remove ':' for simplicity\n    groupedData[year][paceKey] = rate;\n  });\n  return groupedData;\n};\nconst HeartRateChart = () => {\n  const groupedData = groupByPace(heartRateData);\n\n  // Extract years and paces for chart labels\n  const years = Object.keys(groupedData);\n  const paces = Object.keys(groupedData[years[0]]);\n\n  // Create datasets for each pace\n  const datasets = paces.map(pace => ({\n    label: `Pace ${pace.slice(0, 2)}:${pace.slice(2)} min/mi`,\n    data: years.map(year => groupedData[year][pace] || 0)\n  }));\n  const data = {\n    labels: years.map(year => year.toString()),\n    datasets\n  };\n  const options = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Year'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Heart Rate'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    data: data,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 12\n  }, this);\n};\n_c = HeartRateChart;\nexport default HeartRateChart;\nvar _c;\n$RefreshReg$(_c, \"HeartRateChart\");","map":{"version":3,"names":["heartRateData","year","pace","rate","groupByPace","data","groupedData","forEach","paceKey","replace","HeartRateChart","years","Object","keys","paces","datasets","map","label","slice","labels","toString","options","scales","x","title","display","text","y","_jsxDEV","Bar","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carlycole/personal-projects/on-track/on-track/src/components/HeartRateChart.js"],"sourcesContent":["// Heart rate data\nconst heartRateData = [\n    { year: 2021, pace: '7:00', rate: 150 },\n    // Add more data...\n  ];\n  \n  // Function to group data by pace\n  const groupByPace = (data) => {\n    const groupedData = {};\n    data.forEach(({ year, pace, rate }) => {\n      if (!groupedData[year]) {\n        groupedData[year] = {};\n      }\n      const paceKey = pace.replace(':', ''); // Remove ':' for simplicity\n      groupedData[year][paceKey] = rate;\n    });\n    return groupedData;\n  };\n  \n  const HeartRateChart = () => {\n    const groupedData = groupByPace(heartRateData);\n  \n    // Extract years and paces for chart labels\n    const years = Object.keys(groupedData);\n    const paces = Object.keys(groupedData[years[0]]);\n  \n    // Create datasets for each pace\n    const datasets = paces.map((pace) => ({\n      label: `Pace ${pace.slice(0, 2)}:${pace.slice(2)} min/mi`,\n      data: years.map((year) => groupedData[year][pace] || 0),\n    }));\n  \n    const data = {\n      labels: years.map((year) => year.toString()),\n      datasets,\n    };\n  \n    const options = {\n      scales: {\n        x: { title: { display: true, text: 'Year' } },\n        y: { title: { display: true, text: 'Heart Rate' } },\n      },\n    };\n  \n    return <Bar data={data} options={options} />;\n  };\n  \n  export default HeartRateChart;\n  "],"mappings":";;AAAA;AACA,MAAMA,aAAa,GAAG,CAClB;EAAEC,IAAI,EAAE,IAAI;EAAEC,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAE;AAAI;AACtC;AAAA,CACD;;AAED;AACA,MAAMC,WAAW,GAAIC,IAAI,IAAK;EAC5B,MAAMC,WAAW,GAAG,CAAC,CAAC;EACtBD,IAAI,CAACE,OAAO,CAAC,CAAC;IAAEN,IAAI;IAAEC,IAAI;IAAEC;EAAK,CAAC,KAAK;IACrC,IAAI,CAACG,WAAW,CAACL,IAAI,CAAC,EAAE;MACtBK,WAAW,CAACL,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB;IACA,MAAMO,OAAO,GAAGN,IAAI,CAACO,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IACvCH,WAAW,CAACL,IAAI,CAAC,CAACO,OAAO,CAAC,GAAGL,IAAI;EACnC,CAAC,CAAC;EACF,OAAOG,WAAW;AACpB,CAAC;AAED,MAAMI,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMJ,WAAW,GAAGF,WAAW,CAACJ,aAAa,CAAC;;EAE9C;EACA,MAAMW,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACP,WAAW,CAAC;EACtC,MAAMQ,KAAK,GAAGF,MAAM,CAACC,IAAI,CAACP,WAAW,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEhD;EACA,MAAMI,QAAQ,GAAGD,KAAK,CAACE,GAAG,CAAEd,IAAI,KAAM;IACpCe,KAAK,EAAG,QAAOf,IAAI,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAE,IAAGhB,IAAI,CAACgB,KAAK,CAAC,CAAC,CAAE,SAAQ;IACzDb,IAAI,EAAEM,KAAK,CAACK,GAAG,CAAEf,IAAI,IAAKK,WAAW,CAACL,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EACxD,CAAC,CAAC,CAAC;EAEH,MAAMG,IAAI,GAAG;IACXc,MAAM,EAAER,KAAK,CAACK,GAAG,CAAEf,IAAI,IAAKA,IAAI,CAACmB,QAAQ,CAAC,CAAC,CAAC;IAC5CL;EACF,CAAC;EAED,MAAMM,OAAO,GAAG;IACdC,MAAM,EAAE;MACNC,CAAC,EAAE;QAAEC,KAAK,EAAE;UAAEC,OAAO,EAAE,IAAI;UAAEC,IAAI,EAAE;QAAO;MAAE,CAAC;MAC7CC,CAAC,EAAE;QAAEH,KAAK,EAAE;UAAEC,OAAO,EAAE,IAAI;UAAEC,IAAI,EAAE;QAAa;MAAE;IACpD;EACF,CAAC;EAED,oBAAOE,OAAA,CAACC,GAAG;IAACxB,IAAI,EAAEA,IAAK;IAACgB,OAAO,EAAEA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9C,CAAC;AAACC,EAAA,GA1BIxB,cAAc;AA4BpB,eAAeA,cAAc;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}