{"ast":null,"code":"var _jsxFileName = \"/Users/carlycole/personal-projects/on-track/on-track/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [yearlyMiles, setYearlyMiles] = useState({});\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear()); // Default to current year\n  const clientID = 120096;\n  const clientSecret = 'bc3ec467a7464ae5be9fc7a7f6cc69f126945851';\n  const refreshToken = 'f545ac531dd1373ffca07f31d543f2e197810468';\n  const auth_link = \"https://www.strava.com/oauth/token\";\n  const activities_link = \"https://www.strava.com/api/v3/athlete/activities\";\n  const perPage = 30; // Number of activities per page\n\n  useEffect(() => {\n    const fetchData = async (page = 1) => {\n      try {\n        const stravaAuthResponse = await axios.post(`${auth_link}?client_id=${clientID}&client_secret=${clientSecret}&refresh_token=${refreshToken}&grant_type=refresh_token`);\n        const accessToken = stravaAuthResponse.data.access_token;\n        const stravaActivityResponse = await axios.get(`${activities_link}?access_token=${accessToken}&page=${page}&per_page=${perPage}`);\n        const activities = stravaActivityResponse.data; // Assuming the activities are an array in the response\n\n        // Extract and organize activities by years\n        const activitiesByYear = splitActivitiesByYear(activities);\n\n        // Do something with the organized data (e.g., set it to state)\n        // setOrganizedActivities(activitiesByYear);\n\n        fetchData(page + 1);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    const splitActivitiesByYear = activities => {\n      const activitiesByYear = {};\n      activities.forEach(activity => {\n        const year = new Date(activity.date).getFullYear();\n        if (!activitiesByYear[year]) {\n          activitiesByYear[year] = [];\n        }\n        activitiesByYear[year].push(activity);\n      });\n      return activitiesByYear;\n    };\n\n    // Call the fetchData function to start fetching data\n    fetchData();\n  }, []); // Empty dependency array to run the effect only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Yearly Miles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6Amuq2ipmIoPFOfTaK8KqI5TT2w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","yearlyMiles","setYearlyMiles","selectedYear","setSelectedYear","Date","getFullYear","clientID","clientSecret","refreshToken","auth_link","activities_link","perPage","fetchData","page","stravaAuthResponse","post","accessToken","data","access_token","stravaActivityResponse","get","activities","activitiesByYear","splitActivitiesByYear","error","console","forEach","activity","year","date","push","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carlycole/personal-projects/on-track/on-track/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const [yearlyMiles, setYearlyMiles] = useState({});\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear()); // Default to current year\n  const clientID = 120096;\n  const clientSecret = 'bc3ec467a7464ae5be9fc7a7f6cc69f126945851';\n  const refreshToken = 'f545ac531dd1373ffca07f31d543f2e197810468'; \n  const auth_link = \"https://www.strava.com/oauth/token\";\n  const activities_link = \"https://www.strava.com/api/v3/athlete/activities\";\n  const perPage = 30; // Number of activities per page\n\n  useEffect(() => {\n    const fetchData = async (page = 1) => {\n      try {\n        const stravaAuthResponse = await axios.post(`${auth_link}?client_id=${clientID}&client_secret=${clientSecret}&refresh_token=${refreshToken}&grant_type=refresh_token`);\n        const accessToken = stravaAuthResponse.data.access_token;\n  \n        const stravaActivityResponse = await axios.get(`${activities_link}?access_token=${accessToken}&page=${page}&per_page=${perPage}`);\n  \n        const activities = stravaActivityResponse.data; // Assuming the activities are an array in the response\n  \n        // Extract and organize activities by years\n        const activitiesByYear = splitActivitiesByYear(activities);\n  \n        // Do something with the organized data (e.g., set it to state)\n        // setOrganizedActivities(activitiesByYear);\n\n  \n        fetchData(page + 1);\n  \n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n  \n    const splitActivitiesByYear = (activities) => {\n      const activitiesByYear = {};\n  \n      activities.forEach(activity => {\n        const year = new Date(activity.date).getFullYear();\n  \n        if (!activitiesByYear[year]) {\n          activitiesByYear[year] = [];\n        }\n  \n        activitiesByYear[year].push(activity);\n      });\n  \n      return activitiesByYear;\n    };\n  \n    // Call the fetchData function to start fetching data\n    fetchData();\n  }, []); // Empty dependency array to run the effect only once on mount\n  \n\n  return (\n    <div>\n      <h2>Yearly Miles</h2>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAIW,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5E,MAAMC,QAAQ,GAAG,MAAM;EACvB,MAAMC,YAAY,GAAG,0CAA0C;EAC/D,MAAMC,YAAY,GAAG,0CAA0C;EAC/D,MAAMC,SAAS,GAAG,oCAAoC;EACtD,MAAMC,eAAe,GAAG,kDAAkD;EAC1E,MAAMC,OAAO,GAAG,EAAE,CAAC,CAAC;;EAEpBjB,SAAS,CAAC,MAAM;IACd,MAAMkB,SAAS,GAAG,MAAAA,CAAOC,IAAI,GAAG,CAAC,KAAK;MACpC,IAAI;QACF,MAAMC,kBAAkB,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAE,GAAEN,SAAU,cAAaH,QAAS,kBAAiBC,YAAa,kBAAiBC,YAAa,2BAA0B,CAAC;QACtK,MAAMQ,WAAW,GAAGF,kBAAkB,CAACG,IAAI,CAACC,YAAY;QAExD,MAAMC,sBAAsB,GAAG,MAAMxB,KAAK,CAACyB,GAAG,CAAE,GAAEV,eAAgB,iBAAgBM,WAAY,SAAQH,IAAK,aAAYF,OAAQ,EAAC,CAAC;QAEjI,MAAMU,UAAU,GAAGF,sBAAsB,CAACF,IAAI,CAAC,CAAC;;QAEhD;QACA,MAAMK,gBAAgB,GAAGC,qBAAqB,CAACF,UAAU,CAAC;;QAE1D;QACA;;QAGAT,SAAS,CAACC,IAAI,GAAG,CAAC,CAAC;MAErB,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED,MAAMD,qBAAqB,GAAIF,UAAU,IAAK;MAC5C,MAAMC,gBAAgB,GAAG,CAAC,CAAC;MAE3BD,UAAU,CAACK,OAAO,CAACC,QAAQ,IAAI;QAC7B,MAAMC,IAAI,GAAG,IAAIxB,IAAI,CAACuB,QAAQ,CAACE,IAAI,CAAC,CAACxB,WAAW,CAAC,CAAC;QAElD,IAAI,CAACiB,gBAAgB,CAACM,IAAI,CAAC,EAAE;UAC3BN,gBAAgB,CAACM,IAAI,CAAC,GAAG,EAAE;QAC7B;QAEAN,gBAAgB,CAACM,IAAI,CAAC,CAACE,IAAI,CAACH,QAAQ,CAAC;MACvC,CAAC,CAAC;MAEF,OAAOL,gBAAgB;IACzB,CAAC;;IAED;IACAV,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAGR,oBACEf,OAAA;IAAAkC,QAAA,eACElC,OAAA;MAAAkC,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV,CAAC;AAAApC,EAAA,CA5DKD,GAAG;AAAAsC,EAAA,GAAHtC,GAAG;AA8DT,eAAeA,GAAG;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}