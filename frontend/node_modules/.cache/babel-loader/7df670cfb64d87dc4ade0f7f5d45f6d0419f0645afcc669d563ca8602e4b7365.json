{"ast":null,"code":"document.addEventListener(\"DOMContentLoaded\", function () {\n  const activities = [];\n  const clientID = \"your id\";\n  const clientSecret = \"your client secret\";\n  const refreshToken = \"your refresh token\";\n  const authLink = \"https://www.strava.com/oauth/token\";\n  const activitiesLink = `https://www.strava.com/api/v3/athlete/activities`;\n  async function fetchData() {\n    try {\n      // Fetch access token\n      const stravaAuthResponse = await axios.post(`${authLink}?client_id=${clientID}&client_secret=${clientSecret}&refresh_token=${refreshToken}&grant_type=refresh_token`);\n\n      // Fetch activities\n      const stravaActivityResponse = await axios.get(`${activitiesLink}?access_token=${stravaAuthResponse.data.access_token}`);\n\n      // Process activities and extract relevant data\n      const formattedActivities = stravaActivityResponse.data.map(activity => {\n        return {\n          activityPositions: polyline.decode(activity.map.summary_polyline),\n          activityName: activity.name,\n          activityElevation: activity.total_elevation_gain,\n          distance: activity.distance / 1609.34,\n          // Convert meters to miles\n          pace: calculatePace(activity.moving_time, activity.distance),\n          averageHeartRate: activity.average_heartrate,\n          averageSpeed: calculateSpeed(activity.moving_time, activity.distance)\n        };\n      });\n      setActivities(formattedActivities);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  function setActivities(data) {\n    activities.push(...data);\n    renderMap();\n  }\n\n  // Helper function to calculate pace in min/mi\n  function calculatePace(movingTime, distance) {\n    const paceInSeconds = movingTime / distance;\n    const paceInMinutes = Math.floor(paceInSeconds / 60);\n    const paceSeconds = Math.round(paceInSeconds % 60);\n    return `${paceInMinutes}:${paceSeconds < 10 ? '0' : ''}${paceSeconds} min/mi`;\n  }\n\n  // Helper function to calculate average speed in min/mi\n  function calculateSpeed(movingTime, distance) {\n    const speedInMph = distance / 1609.34 / (movingTime / 3600);\n    return speedInMph.toFixed(2) + ' min/mi';\n  }\n  function renderMap() {\n    // Code for rendering the map and activities\n    // Use the 'activities' array to display data on the map as needed\n  }\n  fetchData();\n});","map":{"version":3,"names":["document","addEventListener","activities","clientID","clientSecret","refreshToken","authLink","activitiesLink","fetchData","stravaAuthResponse","axios","post","stravaActivityResponse","get","data","access_token","formattedActivities","map","activity","activityPositions","polyline","decode","summary_polyline","activityName","name","activityElevation","total_elevation_gain","distance","pace","calculatePace","moving_time","averageHeartRate","average_heartrate","averageSpeed","calculateSpeed","setActivities","error","console","push","renderMap","movingTime","paceInSeconds","paceInMinutes","Math","floor","paceSeconds","round","speedInMph","toFixed"],"sources":["/Users/carlycole/personal-projects/on-track/on-track/src/components/Stats.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\n  const activities = [];\n  const clientID = \"your id\";\n  const clientSecret = \"your client secret\";\n  const refreshToken = \"your refresh token\";\n  const authLink = \"https://www.strava.com/oauth/token\";\n  const activitiesLink = `https://www.strava.com/api/v3/athlete/activities`;\n\n  async function fetchData() {\n    try {\n      // Fetch access token\n      const stravaAuthResponse = await axios.post(`${authLink}?client_id=${clientID}&client_secret=${clientSecret}&refresh_token=${refreshToken}&grant_type=refresh_token`);\n\n      // Fetch activities\n      const stravaActivityResponse = await axios.get(`${activitiesLink}?access_token=${stravaAuthResponse.data.access_token}`);\n\n      // Process activities and extract relevant data\n      const formattedActivities = stravaActivityResponse.data.map(activity => {\n        return {\n          activityPositions: polyline.decode(activity.map.summary_polyline),\n          activityName: activity.name,\n          activityElevation: activity.total_elevation_gain,\n          distance: activity.distance / 1609.34, // Convert meters to miles\n          pace: calculatePace(activity.moving_time, activity.distance),\n          averageHeartRate: activity.average_heartrate,\n          averageSpeed: calculateSpeed(activity.moving_time, activity.distance),\n        };\n      });\n\n      setActivities(formattedActivities);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  function setActivities(data) {\n    activities.push(...data);\n    renderMap();\n  }\n\n  // Helper function to calculate pace in min/mi\n  function calculatePace(movingTime, distance) {\n    const paceInSeconds = movingTime / distance;\n    const paceInMinutes = Math.floor(paceInSeconds / 60);\n    const paceSeconds = Math.round(paceInSeconds % 60);\n    return `${paceInMinutes}:${paceSeconds < 10 ? '0' : ''}${paceSeconds} min/mi`;\n  }\n\n  // Helper function to calculate average speed in min/mi\n  function calculateSpeed(movingTime, distance) {\n    const speedInMph = (distance / 1609.34) / (movingTime / 3600);\n    return speedInMph.toFixed(2) + ' min/mi';\n  }\n\n  function renderMap() {\n    // Code for rendering the map and activities\n    // Use the 'activities' array to display data on the map as needed\n  }\n\n  fetchData();\n});\n"],"mappings":"AAAAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACxD,MAAMC,UAAU,GAAG,EAAE;EACrB,MAAMC,QAAQ,GAAG,SAAS;EAC1B,MAAMC,YAAY,GAAG,oBAAoB;EACzC,MAAMC,YAAY,GAAG,oBAAoB;EACzC,MAAMC,QAAQ,GAAG,oCAAoC;EACrD,MAAMC,cAAc,GAAI,kDAAiD;EAEzE,eAAeC,SAASA,CAAA,EAAG;IACzB,IAAI;MACF;MACA,MAAMC,kBAAkB,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAE,GAAEL,QAAS,cAAaH,QAAS,kBAAiBC,YAAa,kBAAiBC,YAAa,2BAA0B,CAAC;;MAErK;MACA,MAAMO,sBAAsB,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAE,GAAEN,cAAe,iBAAgBE,kBAAkB,CAACK,IAAI,CAACC,YAAa,EAAC,CAAC;;MAExH;MACA,MAAMC,mBAAmB,GAAGJ,sBAAsB,CAACE,IAAI,CAACG,GAAG,CAACC,QAAQ,IAAI;QACtE,OAAO;UACLC,iBAAiB,EAAEC,QAAQ,CAACC,MAAM,CAACH,QAAQ,CAACD,GAAG,CAACK,gBAAgB,CAAC;UACjEC,YAAY,EAAEL,QAAQ,CAACM,IAAI;UAC3BC,iBAAiB,EAAEP,QAAQ,CAACQ,oBAAoB;UAChDC,QAAQ,EAAET,QAAQ,CAACS,QAAQ,GAAG,OAAO;UAAE;UACvCC,IAAI,EAAEC,aAAa,CAACX,QAAQ,CAACY,WAAW,EAAEZ,QAAQ,CAACS,QAAQ,CAAC;UAC5DI,gBAAgB,EAAEb,QAAQ,CAACc,iBAAiB;UAC5CC,YAAY,EAAEC,cAAc,CAAChB,QAAQ,CAACY,WAAW,EAAEZ,QAAQ,CAACS,QAAQ;QACtE,CAAC;MACH,CAAC,CAAC;MAEFQ,aAAa,CAACnB,mBAAmB,CAAC;IACpC,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF;EAEA,SAASD,aAAaA,CAACrB,IAAI,EAAE;IAC3BZ,UAAU,CAACoC,IAAI,CAAC,GAAGxB,IAAI,CAAC;IACxByB,SAAS,CAAC,CAAC;EACb;;EAEA;EACA,SAASV,aAAaA,CAACW,UAAU,EAAEb,QAAQ,EAAE;IAC3C,MAAMc,aAAa,GAAGD,UAAU,GAAGb,QAAQ;IAC3C,MAAMe,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACH,aAAa,GAAG,EAAE,CAAC;IACpD,MAAMI,WAAW,GAAGF,IAAI,CAACG,KAAK,CAACL,aAAa,GAAG,EAAE,CAAC;IAClD,OAAQ,GAAEC,aAAc,IAAGG,WAAW,GAAG,EAAE,GAAG,GAAG,GAAG,EAAG,GAAEA,WAAY,SAAQ;EAC/E;;EAEA;EACA,SAASX,cAAcA,CAACM,UAAU,EAAEb,QAAQ,EAAE;IAC5C,MAAMoB,UAAU,GAAIpB,QAAQ,GAAG,OAAO,IAAKa,UAAU,GAAG,IAAI,CAAC;IAC7D,OAAOO,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC,GAAG,SAAS;EAC1C;EAEA,SAAST,SAASA,CAAA,EAAG;IACnB;IACA;EAAA;EAGF/B,SAAS,CAAC,CAAC;AACb,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}