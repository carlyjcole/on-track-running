{"ast":null,"code":"var _jsxFileName = \"/Users/carlycole/personal-projects/on-track/frontend/src/components/HeartRateChart.js\";\nimport * as React from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chartSetting = {\n  xAxis: [{\n    label: 'heart rate (bpm)'\n  }],\n  width: 500,\n  height: 400\n};\nconst dataset = [{\n  pace: '7:00-7:30',\n  heartrate: 150\n}];\nconst valueFormatter = value => `${value} bpm`;\nconst HeartRateChart = ({\n  activities\n}) => {\n  const paceCategories = [{\n    label: '7:00-7:30',\n    minPace: 420,\n    maxPace: 450\n  }, {\n    label: '7:30-8:00',\n    minPace: 450,\n    maxPace: 480\n  }, {\n    label: '8:00-8:30',\n    minPace: 480,\n    maxPace: 510\n  }, {\n    label: '8:30-9:00',\n    minPace: 510,\n    maxPace: 540\n  }, {\n    label: '9:00-9:30',\n    minPace: 540,\n    maxPace: 570\n  }, {\n    label: '9:30-10:00',\n    minPace: 570,\n    maxPace: 600\n  }];\n\n  // Function to filter activities into pace categories and calculate average heart rate\n  const getAverageHeartRateByPace = (activities, paceCategory) => {\n    const filteredActivities = activities.filter(activity => {\n      const paceInSeconds = activity.pace_minutes * 60 + activity.pace_seconds;\n      return paceInSeconds >= paceCategory.minPace && paceInSeconds < paceCategory.maxPace;\n    });\n    const totalHeartRate = filteredActivities.reduce((total, activity) => total + activity.heartrate, 0);\n    const averageHeartRate = filteredActivities.length > 0 ? Math.round(totalHeartRate / filteredActivities.length) : 0;\n    return averageHeartRate;\n  };\n  const averageHeartRatesByPace = paceCategories.map(paceCategory => ({\n    label: paceCategory.label,\n    averageHeartRate: getAverageHeartRateByPace(activities, paceCategory)\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Heart Rate by Pace Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: averageHeartRatesByPace.map((paceCategory, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [paceCategory.label, \": \", paceCategory.averageHeartRate, \" bpm\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_c = HeartRateChart;\nexport default HeartRateChart;\nvar _c;\n$RefreshReg$(_c, \"HeartRateChart\");","map":{"version":3,"names":["React","BarChart","jsxDEV","_jsxDEV","chartSetting","xAxis","label","width","height","dataset","pace","heartrate","valueFormatter","value","HeartRateChart","activities","paceCategories","minPace","maxPace","getAverageHeartRateByPace","paceCategory","filteredActivities","filter","activity","paceInSeconds","pace_minutes","pace_seconds","totalHeartRate","reduce","total","averageHeartRate","length","Math","round","averageHeartRatesByPace","map","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/carlycole/personal-projects/on-track/frontend/src/components/HeartRateChart.js"],"sourcesContent":["import * as React from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\n\nconst chartSetting = {\n  xAxis: [\n    {\n      label: 'heart rate (bpm)',\n    },\n  ],\n  width: 500,\n  height: 400,\n};\nconst dataset = [\n  {\n    pace: '7:00-7:30',\n    heartrate: 150,\n  }\n];\n\nconst valueFormatter = (value) => `${value} bpm`;\n\nconst HeartRateChart = ({ activities }) => {\n  const paceCategories = [\n    { label: '7:00-7:30', minPace: 420, maxPace: 450 },\n    { label: '7:30-8:00', minPace: 450, maxPace: 480 },\n    { label: '8:00-8:30', minPace: 480, maxPace: 510 },\n    { label: '8:30-9:00', minPace: 510, maxPace: 540 },\n    { label: '9:00-9:30', minPace: 540, maxPace: 570 },\n    { label: '9:30-10:00', minPace: 570, maxPace: 600 },\n  ];\n\n  // Function to filter activities into pace categories and calculate average heart rate\n  const getAverageHeartRateByPace = (activities, paceCategory) => {\n    const filteredActivities = activities.filter(activity => {\n      const paceInSeconds = activity.pace_minutes * 60 + activity.pace_seconds;\n      return paceInSeconds >= paceCategory.minPace && paceInSeconds < paceCategory.maxPace;\n    });\n\n    const totalHeartRate = filteredActivities.reduce((total, activity) => total + activity.heartrate, 0);\n    const averageHeartRate = filteredActivities.length > 0 ? Math.round(totalHeartRate / filteredActivities.length) : 0;\n    return averageHeartRate;\n  };\n\n  const averageHeartRatesByPace = paceCategories.map(paceCategory => ({\n    label: paceCategory.label,\n    averageHeartRate: getAverageHeartRateByPace(activities, paceCategory),\n  }));\n\n  return (\n    <div>\n      <h2>Heart Rate by Pace Category</h2>\n      <ul>\n        {averageHeartRatesByPace.map((paceCategory, index) => (\n          <li key={index}>\n            <p>{paceCategory.label}: {paceCategory.averageHeartRate} bpm</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default HeartRateChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}