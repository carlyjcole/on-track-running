{"ast":null,"code":"var _jsxFileName = \"/Users/carlycole/personal-projects/on-track/frontend/src/components/HeartRateChart.js\";\nimport * as React from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chartSetting = {\n  xAxis: [{\n    label: 'heart rate (bpm)'\n  }],\n  width: 500,\n  height: 400\n};\nconst valueFormatter = value => `${value} bpm`;\nconst HeartRateChart = ({\n  activities\n}) => {\n  console.log(activities);\n  const paceCategories = [{\n    label: '7:00-7:30',\n    minPace: 420,\n    maxPace: 450\n  }, {\n    label: '7:30-8:00',\n    minPace: 450,\n    maxPace: 480\n  }, {\n    label: '8:00-8:30',\n    minPace: 480,\n    maxPace: 510\n  }, {\n    label: '8:30-9:00',\n    minPace: 510,\n    maxPace: 540\n  }, {\n    label: '9:00-9:30',\n    minPace: 540,\n    maxPace: 570\n  }, {\n    label: '9:30-10:00',\n    minPace: 570,\n    maxPace: 600\n  }];\n  const getAverageHeartRateByPace = (activities, paceCategory) => {\n    console.log('Filtering activities for pace category:', paceCategory.label);\n    const filteredActivities = activities.filter(activity => {\n      const paceInSeconds = activity.pace_minutes * 60 + activity.pace_seconds;\n      return paceInSeconds >= paceCategory.minPace && paceInSeconds < paceCategory.maxPace;\n    });\n    console.log('Filtered activities:', filteredActivities);\n    const totalHeartRate = filteredActivities.reduce((total, activity) => total + activity.heartrate, 0);\n    const averageHeartRate = filteredActivities.length > 0 ? Math.round(totalHeartRate / filteredActivities.length) : 0;\n    return averageHeartRate;\n  };\n  const averageHeartRatesByPace = paceCategories.map(paceCategory => ({\n    label: paceCategory.label,\n    averageHeartRate: getAverageHeartRateByPace(activities, paceCategory)\n  }));\n  const dataset = averageHeartRatesByPace.map(paceCategory => ({\n    category: paceCategory.label,\n    value: paceCategory.averageHeartRate\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      dataset: dataset,\n      yAxis: [{\n        scaleType: 'band',\n        dataKey: 'paceCategories'\n      }],\n      xAxis: [{\n        scaleType: 'band',\n        dataKey: 'average'\n      }],\n      series: [{\n        dataKey: 'heartrate',\n        valueFormatter,\n        color: 'rgb(217, 229, 238)'\n      }],\n      layout: \"horizontal\",\n      ...chartSetting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_c = HeartRateChart;\nexport default HeartRateChart;\nvar _c;\n$RefreshReg$(_c, \"HeartRateChart\");","map":{"version":3,"names":["React","BarChart","jsxDEV","_jsxDEV","chartSetting","xAxis","label","width","height","valueFormatter","value","HeartRateChart","activities","console","log","paceCategories","minPace","maxPace","getAverageHeartRateByPace","paceCategory","filteredActivities","filter","activity","paceInSeconds","pace_minutes","pace_seconds","totalHeartRate","reduce","total","heartrate","averageHeartRate","length","Math","round","averageHeartRatesByPace","map","dataset","category","children","yAxis","scaleType","dataKey","series","color","layout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carlycole/personal-projects/on-track/frontend/src/components/HeartRateChart.js"],"sourcesContent":["import * as React from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\n\nconst chartSetting = {\n  xAxis: [\n    {\n      label: 'heart rate (bpm)',\n    },\n  ],\n  width: 500,\n  height: 400,\n};\n\nconst valueFormatter = (value) => `${value} bpm`;\n\nconst HeartRateChart = ({ activities }) => {\n  console.log(activities)\n  const paceCategories = [\n    { label: '7:00-7:30', minPace: 420, maxPace: 450 },\n    { label: '7:30-8:00', minPace: 450, maxPace: 480 },\n    { label: '8:00-8:30', minPace: 480, maxPace: 510 },\n    { label: '8:30-9:00', minPace: 510, maxPace: 540 },\n    { label: '9:00-9:30', minPace: 540, maxPace: 570 },\n    { label: '9:30-10:00', minPace: 570, maxPace: 600 },\n  ];\n\n  const getAverageHeartRateByPace = (activities, paceCategory) => {\n    console.log('Filtering activities for pace category:', paceCategory.label);\n    const filteredActivities = activities.filter(activity => {\n      const paceInSeconds = activity.pace_minutes * 60 + activity.pace_seconds;\n      return paceInSeconds >= paceCategory.minPace && paceInSeconds < paceCategory.maxPace;\n    });\n\n    console.log('Filtered activities:', filteredActivities);\n    const totalHeartRate = filteredActivities.reduce((total, activity) => total + activity.heartrate, 0);\n    const averageHeartRate = filteredActivities.length > 0 ? Math.round(totalHeartRate / filteredActivities.length) : 0;\n    return averageHeartRate;\n  };\n\n  const averageHeartRatesByPace = paceCategories.map(paceCategory => ({\n    label: paceCategory.label,\n    averageHeartRate: getAverageHeartRateByPace(activities, paceCategory),\n  }));\n\n  const dataset = averageHeartRatesByPace.map(paceCategory => ({\n    category: paceCategory.label,\n    value: paceCategory.averageHeartRate,\n  }));\n\n  return (\n    <div>\n      <BarChart\n      dataset={ dataset }\n      yAxis={[{ scaleType: 'band', dataKey: 'paceCategories' }]}\n      xAxis={[{ scaleType: 'band', dataKey: 'average' }]}\n      series={[{ dataKey: 'heartrate', valueFormatter, color: 'rgb(217, 229, 238)'}]}\n      layout=\"horizontal\"\n      {...chartSetting}\n    />\n    </div>\n  );\n};\n\nexport default HeartRateChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}