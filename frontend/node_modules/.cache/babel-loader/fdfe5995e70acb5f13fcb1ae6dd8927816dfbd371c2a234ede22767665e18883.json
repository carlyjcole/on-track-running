{"ast":null,"code":"var _jsxFileName = \"/Users/carlycole/personal-projects/on-track/on-track/src/components/FetchDataFromStrava.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Importing required libraries\nconst {\n  useEffect,\n  useState\n} = require('react');\nconst {\n  MapContainer,\n  TileLayer,\n  Popup,\n  Polyline\n} = require('react-leaflet');\nconst axios = require('axios');\nconst polyline = require('@mapbox/polyline');\n\n// Defining the main function\nfunction FetchDataFromStrava() {\n  _s();\n  // Defining the Activity interface\n  const Activity = {\n    activityPositions: [],\n    activityName: '',\n    activityElevation: 0\n  };\n\n  // Initializing state for activities\n  const [activities, setActivities] = useState < Activity > [];\n\n  // Setting up API credentials\n  const clientID = 120096;\n  const clientSecret = \"bc3ec467a7464ae5be9fc7a7f6cc69f126945851\";\n  const refreshToken = \"f545ac531dd1373ffca07f31d543f2e197810468\";\n  const authLink = \"https://www.strava.com/oauth/token\";\n  const activitiesLink = `https://www.strava.com/api/v3/athlete/activities`;\n\n  // Fetching data using useEffect\n  useEffect(() => {\n    // Creating a fetchData function\n    async function fetchData() {\n      // Authenticating with Strava\n      const stravaAuthResponse = await axios.post(`${authLink}?client_id=${clientID}&client_secret=${clientSecret}&refresh_token=${refreshToken}&grant_type=refresh_token`);\n\n      // Fetching activities data\n      const stravaActivityResponse = await axios.get(`${activitiesLink}?access_token=${stravaAuthResponse.data.access_token}`);\n      console.log(stravaActivityResponse);\n\n      // Processing polyline data\n      const polylines = [];\n      for (let i = 0; i < stravaActivityResponse.data.length; i += 1) {\n        const activityPolyline = stravaActivityResponse.data[i].map.summary_polyline;\n        const activityName = stravaActivityResponse.data[i].name;\n        const activityElevation = stravaActivityResponse.data[i].total_elevation_gain;\n        polylines.push({\n          activityPositions: polyline.decode(activityPolyline),\n          activityName,\n          activityElevation\n        });\n      }\n\n      // Setting activities state\n      setActivities(polylines);\n    }\n\n    // Calling fetchData function\n    fetchData();\n  }, []);\n\n  // Rendering the map component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Name: \" + activity.activityName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Total Elevation Gain: \" + activity.activityElevation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Distance: \" + activity.distance.toFixed(2) + \" miles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Pace: \" + activity.pace\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Average Heart Rate: \" + activity.averageHeartRate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Average Speed: \" + activity.averageSpeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n// Exporting the App function\n_s(FetchDataFromStrava, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = FetchDataFromStrava;\nmodule.exports = FetchDataFromStrava;\nvar _c;\n$RefreshReg$(_c, \"FetchDataFromStrava\");","map":{"version":3,"names":["useEffect","useState","require","MapContainer","TileLayer","Popup","Polyline","axios","polyline","FetchDataFromStrava","_s","Activity","activityPositions","activityName","activityElevation","activities","setActivities","clientID","clientSecret","refreshToken","authLink","activitiesLink","fetchData","stravaAuthResponse","post","stravaActivityResponse","get","data","access_token","console","log","polylines","i","length","activityPolyline","map","summary_polyline","name","total_elevation_gain","push","decode","_jsxDEV","children","activity","fileName","_jsxFileName","lineNumber","columnNumber","distance","toFixed","pace","averageHeartRate","averageSpeed","_c","module","exports","$RefreshReg$"],"sources":["/Users/carlycole/personal-projects/on-track/on-track/src/components/FetchDataFromStrava.js"],"sourcesContent":["// Importing required libraries\nconst { useEffect, useState } = require('react');\nconst { MapContainer, TileLayer, Popup, Polyline } = require('react-leaflet');\nconst axios = require('axios');\nconst polyline = require('@mapbox/polyline');\n\n// Defining the main function\nfunction FetchDataFromStrava() {\n  // Defining the Activity interface\n  const Activity = {\n    activityPositions: [],\n    activityName: '',\n    activityElevation: 0\n  };\n\n  // Initializing state for activities\n  const [activities, setActivities] = useState<Activity>([]);\n\n  // Setting up API credentials\n  const clientID = 120096;\n  const clientSecret = \"bc3ec467a7464ae5be9fc7a7f6cc69f126945851\";\n  const refreshToken = \"f545ac531dd1373ffca07f31d543f2e197810468\";\n  const authLink = \"https://www.strava.com/oauth/token\";\n  const activitiesLink = `https://www.strava.com/api/v3/athlete/activities`;\n\n  // Fetching data using useEffect\n  useEffect(() => {\n    // Creating a fetchData function\n    async function fetchData() {\n      // Authenticating with Strava\n      const stravaAuthResponse = await axios.post(`${authLink}?client_id=${clientID}&client_secret=${clientSecret}&refresh_token=${refreshToken}&grant_type=refresh_token`);\n      \n      // Fetching activities data\n      const stravaActivityResponse = await axios.get(`${activitiesLink}?access_token=${stravaAuthResponse.data.access_token}`);\n      console.log(stravaActivityResponse);\n\n      // Processing polyline data\n      const polylines = [];\n      for (let i = 0; i < stravaActivityResponse.data.length; i += 1) {\n        const activityPolyline = stravaActivityResponse.data[i].map.summary_polyline;\n        const activityName = stravaActivityResponse.data[i].name;\n        const activityElevation = stravaActivityResponse.data[i].total_elevation_gain;\n        polylines.push({ activityPositions: polyline.decode(activityPolyline), activityName, activityElevation });\n      }\n\n      // Setting activities state\n      setActivities(polylines);\n    }\n\n    // Calling fetchData function\n    fetchData();\n  }, []);\n\n  // Rendering the map component\n  return (\n    <div>\n              <h2>{\"Name: \" + activity.activityName}</h2>\n              <p>{\"Total Elevation Gain: \" + activity.activityElevation}</p>\n              <p>{\"Distance: \" + activity.distance.toFixed(2) + \" miles\"}</p>\n              <p>{\"Pace: \" + activity.pace}</p>\n              <p>{\"Average Heart Rate: \" + activity.averageHeartRate}</p>\n              <p>{\"Average Speed: \" + activity.averageSpeed}</p>\n    </div>\n  );\n}\n\n// Exporting the App function\nmodule.exports = FetchDataFromStrava;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}